services:
  db:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_DB: vampire_db
      POSTGRES_USER: api_user
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U api_user -d vampire_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M

  app:
    build: .
    command: sh -c "alembic upgrade head && uvicorn app.main:app --host 0.0.0.0 --port 8000"
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: '0.75'
          memory: 512M

  test:
    build: .
    command: pytest tests/
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M

  loki:
    image: grafana/loki:2.9.4
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M

  grafana:
    image: grafana/grafana:10.4.2
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M

  promtail:
    image: grafana/promtail:2.9.4
    volumes:
      - ./promtail-config.yaml:/etc/promtail/config.yaml
      - /var/log:/var/log
      - /var/lib/docker/containers:/var/lib/docker/containers
      - /etc/hostname:/etc/hostname
      - /etc/localtime:/etc/localtime:ro
    command: -config.file=/etc/promtail/config.yaml
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - "9200:9200"
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: '1.00'
          memory: 1G

  kibana:
    image: docker.elastic.co/kibana/kibana:8.13.4
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M

volumes:
  postgres_data:

networks:
  backend:
    driver: bridge
